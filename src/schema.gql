# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  uid: String!
  createdAt: DateTime!
  name: String!
  comments: [Comment!]!
  posts: [Post!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Post {
  id: Int!
  title: String!
  body: String!
  published: Boolean!
  authorId: String!
  author: User!
  comments: [Comment!]!
}

type Comment {
  id: Int!
  text: String!
  postId: Int!
  userId: String!
  user: User!
  post: Post!
}

type Query {
  users(where: UserWhereInput, orderBy: [UserOrderByWithRelationInput!], cursor: UserWhereUniqueInput, take: Int, skip: Int, distinct: [UserScalarFieldEnum!]): [User!]!
  user(where: UserWhereUniqueInput): User!
  posts(where: PostWhereInput, orderBy: [PostOrderByWithRelationInput!], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum!]): [Post!]!
  post(where: PostWhereUniqueInput): Post!
  comments(where: CommentWhereInput, orderBy: [CommentOrderByWithRelationInput!], cursor: CommentWhereUniqueInput, take: Int, skip: Int, distinct: [CommentScalarFieldEnum!]): [Comment!]!
  comment(where: CommentWhereUniqueInput): Comment!
}

input UserWhereInput {
  uid: StringFilter
  createdAt: DateTimeFilter
  name: StringFilter
  posts: PostListRelationFilter
  comments: CommentListRelationFilter
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: String
  mode: QueryMode
}

enum QueryMode {
  default
  insensitive
}

input DateTimeFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
}

input PostListRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input PostWhereInput {
  id: IntFilter
  title: StringFilter
  body: StringFilter
  published: BoolFilter
  authorId: StringFilter
  author: UserRelationFilter
  comments: CommentListRelationFilter
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
}

input IntFilter {
  equals: Int
  lt: Int
  lte: Int
  gt: Int
  gte: Int
}

input BoolFilter {
  equals: Boolean
  not: Boolean
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input CommentListRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input CommentWhereInput {
  id: IntFilter
  text: StringFilter
  postId: IntFilter
  userId: StringFilter
  post: PostRelationFilter
  user: UserRelationFilter
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

input UserOrderByWithRelationInput {
  uid: SortOrder
  createdAt: SortOrder
  name: SortOrder
  posts: PostOrderByRelationAggregateInput
  comments: CommentOrderByRelationAggregateInput
}

enum SortOrder {
  asc
  desc
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserWhereUniqueInput {
  uid: String
}

enum UserScalarFieldEnum {
  uid
  createdAt
  name
}

input PostOrderByWithRelationInput {
  id: SortOrder
  title: SortOrder
  body: SortOrder
  published: SortOrder
  authorId: SortOrder
  author: UserOrderByWithRelationInput
  comments: PostOrderByRelationAggregateInput
}

input PostWhereUniqueInput {
  id: Int
}

enum PostScalarFieldEnum {
  id
  title
  body
  published
  authorId
}

input CommentOrderByWithRelationInput {
  id: SortOrder
  text: SortOrder
  postId: SortOrder
  userId: SortOrder
  post: PostOrderByWithRelationInput
  user: UserOrderByWithRelationInput
}

input CommentWhereUniqueInput {
  id: Int
}

enum CommentScalarFieldEnum {
  id
  text
  postId
  userId
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(where: UserWhereUniqueInput): User!
  createPost(createPostInput: CreatePostInput!): Post!
  updatePost(updatePostInput: UpdatePostInput!): Post!
  removePost(where: PostWhereUniqueInput): Post!
  createComment(createCommentInput: CreateCommentInput!): Comment!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  removeComment(where: CommentWhereUniqueInput): Comment!
}

input CreateUserInput {
  uid: String!
  name: String!
}

input UpdateUserInput {
  uid: String!
  name: String
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
  authorId: String!
}

input UpdatePostInput {
  title: String
  body: String
  published: Boolean
  authorId: String
  id: Int!
}

input CreateCommentInput {
  text: String!
  postId: Int!
  userId: String!
}

input UpdateCommentInput {
  text: String
  postId: Int
  userId: String
  id: Int!
}